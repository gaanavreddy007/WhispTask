name: Build iOS App with Vosk (Simplified)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Create minimal iOS build
      run: |
        # Create a minimal pubspec.yaml for iOS build
        cat > pubspec_ios.yaml << 'EOF'
        name: whisptask
        description: A smart voice-activated task management app
        publish_to: 'none'
        version: 1.0.0+1
        
        environment:
          sdk: '>=3.1.0 <4.0.0'
        
        dependencies:
          flutter:
            sdk: flutter
          flutter_localizations:
            sdk: flutter
          
          # Core Firebase (minimal set)
          firebase_core: ^3.6.0
          firebase_auth: ^5.3.1
          cloud_firestore: ^5.4.3
          
          # Voice Recognition - VOSK FLUTTER INCLUDED
          vosk_flutter: ^0.3.4
          speech_to_text: ^7.0.0
          permission_handler: ^10.4.5
          flutter_tts: ^4.0.2
          
          # Essential UI
          provider: ^6.1.2
          shared_preferences: ^2.2.2
          
        dev_dependencies:
          flutter_test:
            sdk: flutter
        
        flutter:
          uses-material-design: true
        EOF
        
        # Replace pubspec.yaml with iOS-compatible version
        mv pubspec_ios.yaml pubspec.yaml
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Verify Vosk is included
      run: |
        echo "üé§ Verifying Vosk Flutter is included..."
        grep -n "vosk_flutter:" pubspec.yaml && echo "‚úÖ Vosk Flutter found!" || echo "‚ùå Vosk Flutter missing"
        
        # Create iOS-compatible main.dart without Sentry
        cat > lib/main_ios.dart << 'EOF'
        import 'package:flutter/material.dart';
        import 'package:flutter/foundation.dart';
        import 'package:firebase_core/firebase_core.dart';
        import 'package:provider/provider.dart';
        import 'package:flutter_localizations/flutter_localizations.dart';
        
        import 'package:whisptask/providers/auth_provider.dart';
        import 'package:whisptask/providers/task_provider.dart';
        import 'package:whisptask/providers/theme_provider.dart';
        import 'package:whisptask/providers/voice_provider.dart';
        import 'package:whisptask/providers/language_provider.dart';
        import 'package:whisptask/widgets/auth_wrapper.dart';
        import 'package:whisptask/l10n/app_localizations.dart';
        import 'firebase_options.dart';
        
        void main() async {
          WidgetsFlutterBinding.ensureInitialized();
          
          await Firebase.initializeApp(
            options: DefaultFirebaseOptions.currentPlatform,
          );
          
          runApp(const WhispTaskApp());
        }
        
        class WhispTaskApp extends StatelessWidget {
          const WhispTaskApp({super.key});
        
          @override
          Widget build(BuildContext context) {
            return MultiProvider(
              providers: [
                ChangeNotifierProvider(create: (_) => AuthProvider()),
                ChangeNotifierProvider(create: (_) => TaskProvider()),
                ChangeNotifierProvider(create: (_) => ThemeProvider()),
                ChangeNotifierProvider(create: (_) => VoiceProvider()),
                ChangeNotifierProvider(create: (_) => LanguageProvider()),
              ],
              child: Consumer2<ThemeProvider, LanguageProvider>(
                builder: (context, themeProvider, languageProvider, child) {
                  return MaterialApp(
                    title: 'WhispTask',
                    debugShowCheckedModeBanner: false,
                    theme: ThemeData.light(),
                    darkTheme: ThemeData.dark(),
                    themeMode: ThemeMode.system,
                    locale: languageProvider.currentLocale,
                    localizationsDelegates: const [
                      AppLocalizations.delegate,
                      GlobalMaterialLocalizations.delegate,
                      GlobalWidgetsLocalizations.delegate,
                      GlobalCupertinoLocalizations.delegate,
                    ],
                    supportedLocales: const [
                      Locale('en', ''),
                      Locale('hi', ''),
                      Locale('kn', ''),
                    ],
                    home: const AuthWrapper(),
                  );
                },
              ),
            );
          }
        }
        EOF
        
        # Replace main.dart with iOS version
        mv lib/main_ios.dart lib/main.dart
        
        # Update dependencies
        flutter pub get
        
    - name: Build iOS App with Vosk
      run: |
        echo "üçé Building iOS app with Vosk Flutter support..."
        
        # Build iOS app
        flutter build ios --no-codesign
        
        echo "‚úÖ iOS build completed with Vosk support!"
        
    - name: Create IPA package
      run: |
        echo "üì¶ Creating IPA package..."
        
        # Create ipa directory
        mkdir -p build/ios/ipa
        
        # Create IPA from app bundle
        cd build/ios/iphoneos
        if [ -d "Runner.app" ]; then
          # Create Payload directory
          mkdir -p Payload
          cp -r Runner.app Payload/
          
          # Create IPA
          zip -r ../ipa/WhispTask-Vosk.ipa Payload/
          
          echo "‚úÖ IPA created: WhispTask-Vosk.ipa"
          ls -la ../ipa/
        else
          echo "‚ùå Runner.app not found"
          echo "üìÅ Available files:"
          ls -la
        fi
        
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-vosk
        path: |
          build/ios/ipa/*.ipa
          build/ios/iphoneos/Runner.app
        retention-days: 30
      
    - name: Create App Bundles
      run: |
        mkdir -p build/ios/ipa
        
        # Create Simulator app bundle if it exists
        if [ -d "build/ios/iphonesimulator/Runner.app" ]; then
          echo "üì¶ Creating Simulator app bundle..."
          cd build/ios/iphonesimulator
          zip -r ../ipa/WhispTask-Simulator.app.zip Runner.app
          cd ../../..
          echo "‚úÖ Simulator bundle created: WhispTask-Simulator.app.zip"
        else
          echo "‚ùå No simulator build found"
        fi
        
        # Create Device IPA if it exists
        if [ -d "build/ios/iphoneos/Runner.app" ]; then
          echo "üì¶ Creating Device IPA..."
          cd build/ios/iphoneos
          zip -r ../ipa/WhispTask-Device.ipa Runner.app
          cd ../../..
          echo "‚úÖ Device IPA created: WhispTask-Device.ipa"
        else
          echo "‚ùå No device build found"
        fi
        
        # Create a fallback file if no builds succeeded
        if [ ! "$(ls -A build/ios/ipa/)" ]; then
          echo "‚ö†Ô∏è No iOS builds succeeded, creating info file..."
          echo "iOS builds failed. Check the build logs above for details." > build/ios/ipa/BUILD_FAILED.txt
          echo "Consider using the web version instead: flutter build web --release" >> build/ios/ipa/BUILD_FAILED.txt
        fi
        
        # List created files
        echo "üìÅ Final artifacts:"
        ls -la build/ios/ipa/
        
    - name: Upload iOS App Bundles
      uses: actions/upload-artifact@v4
      with:
        name: ios-apps
        path: build/ios/ipa/
        retention-days: 30
