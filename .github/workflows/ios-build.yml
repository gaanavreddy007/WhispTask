name: Build iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Create iOS-compatible version
      run: |
        # Backup original files
        cp pubspec.yaml pubspec.yaml.backup
        cp lib/main.dart lib/main.dart.backup
        
        # Remove Sentry from pubspec.yaml using grep and awk (more reliable)
        grep -v "sentry_flutter:" pubspec.yaml > temp_pubspec.yaml && mv temp_pubspec.yaml pubspec.yaml
        grep -v "sentry_dart_plugin:" pubspec.yaml > temp_pubspec.yaml && mv temp_pubspec.yaml pubspec.yaml
        
        # Create iOS-compatible main.dart without Sentry
        cat > lib/main_ios.dart << 'EOF'
        import 'package:flutter/material.dart';
        import 'package:flutter/foundation.dart';
        import 'package:firebase_core/firebase_core.dart';
        import 'package:provider/provider.dart';
        import 'package:flutter_localizations/flutter_localizations.dart';
        
        import 'package:whisptask/providers/auth_provider.dart';
        import 'package:whisptask/providers/task_provider.dart';
        import 'package:whisptask/providers/theme_provider.dart';
        import 'package:whisptask/providers/voice_provider.dart';
        import 'package:whisptask/providers/language_provider.dart';
        import 'package:whisptask/widgets/auth_wrapper.dart';
        import 'package:whisptask/l10n/app_localizations.dart';
        import 'firebase_options.dart';
        
        void main() async {
          WidgetsFlutterBinding.ensureInitialized();
          
          await Firebase.initializeApp(
            options: DefaultFirebaseOptions.currentPlatform,
          );
          
          runApp(const WhispTaskApp());
        }
        
        class WhispTaskApp extends StatelessWidget {
          const WhispTaskApp({super.key});
        
          @override
          Widget build(BuildContext context) {
            return MultiProvider(
              providers: [
                ChangeNotifierProvider(create: (_) => AuthProvider()),
                ChangeNotifierProvider(create: (_) => TaskProvider()),
                ChangeNotifierProvider(create: (_) => ThemeProvider()),
                ChangeNotifierProvider(create: (_) => VoiceProvider()),
                ChangeNotifierProvider(create: (_) => LanguageProvider()),
              ],
              child: Consumer2<ThemeProvider, LanguageProvider>(
                builder: (context, themeProvider, languageProvider, child) {
                  return MaterialApp(
                    title: 'WhispTask',
                    debugShowCheckedModeBanner: false,
                    theme: ThemeData.light(),
                    darkTheme: ThemeData.dark(),
                    themeMode: ThemeMode.system,
                    locale: languageProvider.currentLocale,
                    localizationsDelegates: const [
                      AppLocalizations.delegate,
                      GlobalMaterialLocalizations.delegate,
                      GlobalWidgetsLocalizations.delegate,
                      GlobalCupertinoLocalizations.delegate,
                    ],
                    supportedLocales: const [
                      Locale('en', ''),
                      Locale('hi', ''),
                      Locale('kn', ''),
                    ],
                    home: const AuthWrapper(),
                  );
                },
              ),
            );
          }
        }
        EOF
        
        # Replace main.dart with iOS version
        mv lib/main_ios.dart lib/main.dart
        
        # Update dependencies
        flutter pub get
        
    - name: Build iOS Apps
      run: |
        # Build for iOS Simulator (debug mode - release not supported for simulator)
        echo "🔨 Building for iOS Simulator (debug mode)..."
        if flutter build ios --debug --simulator; then
          echo "✅ Simulator build successful"
        else
          echo "❌ Simulator build failed, continuing..."
        fi
        
        # Build for device (release mode with no codesigning)
        echo "🔨 Building for iOS Device (release mode)..."
        if flutter build ios --release --no-codesign; then
          echo "✅ Device build successful"
        else
          echo "❌ Device build failed, continuing..."
        fi
        
        # Show what was built
        echo "📁 Build outputs:"
        ls -la build/ios/ || echo "No build directory found"
      
    - name: Create App Bundles
      run: |
        mkdir -p build/ios/ipa
        
        # Create Simulator app bundle if it exists
        if [ -d "build/ios/iphonesimulator/Runner.app" ]; then
          echo "📦 Creating Simulator app bundle..."
          cd build/ios/iphonesimulator
          zip -r ../ipa/WhispTask-Simulator.app.zip Runner.app
          cd ../../..
          echo "✅ Simulator bundle created: WhispTask-Simulator.app.zip"
        else
          echo "❌ No simulator build found"
        fi
        
        # Create Device IPA if it exists
        if [ -d "build/ios/iphoneos/Runner.app" ]; then
          echo "📦 Creating Device IPA..."
          cd build/ios/iphoneos
          zip -r ../ipa/WhispTask-Device.ipa Runner.app
          cd ../../..
          echo "✅ Device IPA created: WhispTask-Device.ipa"
        else
          echo "❌ No device build found"
        fi
        
        # Create a fallback file if no builds succeeded
        if [ ! "$(ls -A build/ios/ipa/)" ]; then
          echo "⚠️ No iOS builds succeeded, creating info file..."
          echo "iOS builds failed. Check the build logs above for details." > build/ios/ipa/BUILD_FAILED.txt
          echo "Consider using the web version instead: flutter build web --release" >> build/ios/ipa/BUILD_FAILED.txt
        fi
        
        # List created files
        echo "📁 Final artifacts:"
        ls -la build/ios/ipa/
        
    - name: Upload iOS App Bundles
      uses: actions/upload-artifact@v4
      with:
        name: ios-apps
        path: build/ios/ipa/
        retention-days: 30
